// Code generated by MockGen. DO NOT EDIT.
// Source: user_model.go

// Package mock_model is a generated GoMock package.
package mock_model

import (
	entity "github.com/djeniusinvfest/inventora/auth/entity"
	gomock "github.com/golang/mock/gomock"
	bson "go.mongodb.org/mongo-driver/bson"
	reflect "reflect"
)

// MockUserModel is a mock of UserModel interface
type MockUserModel struct {
	ctrl     *gomock.Controller
	recorder *MockUserModelMockRecorder
}

// MockUserModelMockRecorder is the mock recorder for MockUserModel
type MockUserModelMockRecorder struct {
	mock *MockUserModel
}

// NewMockUserModel creates a new mock instance
func NewMockUserModel(ctrl *gomock.Controller) *MockUserModel {
	mock := &MockUserModel{ctrl: ctrl}
	mock.recorder = &MockUserModelMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockUserModel) EXPECT() *MockUserModelMockRecorder {
	return m.recorder
}

// Create mocks base method
func (m *MockUserModel) Create(user *entity.User) error {
	ret := m.ctrl.Call(m, "Create", user)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create
func (mr *MockUserModelMockRecorder) Create(user interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockUserModel)(nil).Create), user)
}

// FindOne mocks base method
func (m *MockUserModel) FindOne(filter bson.D, withDeleted bool) (*entity.User, error) {
	ret := m.ctrl.Call(m, "FindOne", filter, withDeleted)
	ret0, _ := ret[0].(*entity.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindOne indicates an expected call of FindOne
func (mr *MockUserModelMockRecorder) FindOne(filter, withDeleted interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindOne", reflect.TypeOf((*MockUserModel)(nil).FindOne), filter, withDeleted)
}
