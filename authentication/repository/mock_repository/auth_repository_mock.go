// Code generated by MockGen. DO NOT EDIT.
// Source: auth_repository.go

// Package mock is a generated GoMock package.
package mock_repository

import (
	proto "github.com/djeniusinvfest/inventora/auth/proto"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockAuthRepository is a mock of AuthRepository interface
type MockAuthRepository struct {
	ctrl     *gomock.Controller
	recorder *MockAuthRepositoryMockRecorder
}

// MockAuthRepositoryMockRecorder is the mock recorder for MockAuthRepository
type MockAuthRepositoryMockRecorder struct {
	mock *MockAuthRepository
}

// NewMockAuthRepository creates a new mock instance
func NewMockAuthRepository(ctrl *gomock.Controller) *MockAuthRepository {
	mock := &MockAuthRepository{ctrl: ctrl}
	mock.recorder = &MockAuthRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockAuthRepository) EXPECT() *MockAuthRepositoryMockRecorder {
	return m.recorder
}

// RegisterUser mocks base method
func (m *MockAuthRepository) RegisterUser(p *proto.RegisterRequest) error {
	ret := m.ctrl.Call(m, "RegisterUser", p)
	ret0, _ := ret[0].(error)
	return ret0
}

// RegisterUser indicates an expected call of RegisterUser
func (mr *MockAuthRepositoryMockRecorder) RegisterUser(p interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterUser", reflect.TypeOf((*MockAuthRepository)(nil).RegisterUser), p)
}
